{"ast":null,"code":"import { urlAlphabet } from './url-alphabet/index.js';\n\nif (process.env.NODE_ENV !== 'production') {\n  if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative' && typeof crypto === 'undefined') {\n    throw new Error('React Native does not have a built-in secure random generator. ' + 'If you don’t need unpredictable IDs use `nanoid/non-secure`. ' + 'For secure IDs, import `react-native-get-random-values` ' + 'before Nano ID.');\n  }\n\n  if (typeof msCrypto !== 'undefined' && typeof crypto === 'undefined') {\n    throw new Error('Import file with `if (!window.crypto) window.crypto = window.msCrypto`' + ' before importing Nano ID to fix IE 11 support');\n  }\n\n  if (typeof crypto === 'undefined') {\n    throw new Error('Your browser does not have secure random generator. ' + 'If you don’t need unpredictable IDs, you can use nanoid/non-secure.');\n  }\n}\n\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes));\n\nlet customRandom = (alphabet, size, getRandom) => {\n  let mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1;\n  let step = -~(1.6 * mask * size / alphabet.length);\n  return () => {\n    let id = '';\n\n    while (true) {\n      let bytes = getRandom(step);\n      let j = step;\n\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || '';\n        if (id.length === size) return id;\n      }\n    }\n  };\n};\n\nlet customAlphabet = (alphabet, size) => customRandom(alphabet, size, random);\n\nlet nanoid = function () {\n  let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 21;\n  let id = '';\n  let bytes = crypto.getRandomValues(new Uint8Array(size));\n\n  while (size--) {\n    let byte = bytes[size] & 63;\n\n    if (byte < 36) {\n      id += byte.toString(36);\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase();\n    } else if (byte < 63) {\n      id += '_';\n    } else {\n      id += '-';\n    }\n  }\n\n  return id;\n};\n\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random };","map":{"version":3,"names":["urlAlphabet","process","env","NODE_ENV","navigator","product","crypto","Error","msCrypto","random","bytes","getRandomValues","Uint8Array","customRandom","alphabet","size","getRandom","mask","Math","log","length","LN2","step","id","j","customAlphabet","nanoid","byte","toString","toUpperCase"],"sources":["D:/rich_text_editor-master/node_modules/nanoid/index.browser.js"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nif (process.env.NODE_ENV !== 'production') {\n  if (\n    typeof navigator !== 'undefined' &&\n    navigator.product === 'ReactNative' &&\n    typeof crypto === 'undefined'\n  ) {\n    throw new Error(\n      'React Native does not have a built-in secure random generator. ' +\n        'If you don’t need unpredictable IDs use `nanoid/non-secure`. ' +\n        'For secure IDs, import `react-native-get-random-values` ' +\n        'before Nano ID.'\n    )\n  }\n  if (typeof msCrypto !== 'undefined' && typeof crypto === 'undefined') {\n    throw new Error(\n      'Import file with `if (!window.crypto) window.crypto = window.msCrypto`' +\n        ' before importing Nano ID to fix IE 11 support'\n    )\n  }\n  if (typeof crypto === 'undefined') {\n    throw new Error(\n      'Your browser does not have secure random generator. ' +\n        'If you don’t need unpredictable IDs, you can use nanoid/non-secure.'\n    )\n  }\n}\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, size, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * size) / alphabet.length)\n  return () => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size) => customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,yBAA5B;;AACA,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;EACzC,IACE,OAAOC,SAAP,KAAqB,WAArB,IACAA,SAAS,CAACC,OAAV,KAAsB,aADtB,IAEA,OAAOC,MAAP,KAAkB,WAHpB,EAIE;IACA,MAAM,IAAIC,KAAJ,CACJ,oEACE,+DADF,GAEE,0DAFF,GAGE,iBAJE,CAAN;EAMD;;EACD,IAAI,OAAOC,QAAP,KAAoB,WAApB,IAAmC,OAAOF,MAAP,KAAkB,WAAzD,EAAsE;IACpE,MAAM,IAAIC,KAAJ,CACJ,2EACE,gDAFE,CAAN;EAID;;EACD,IAAI,OAAOD,MAAP,KAAkB,WAAtB,EAAmC;IACjC,MAAM,IAAIC,KAAJ,CACJ,yDACE,qEAFE,CAAN;EAID;AACF;;AACD,IAAIE,MAAM,GAAGC,KAAK,IAAIJ,MAAM,CAACK,eAAP,CAAuB,IAAIC,UAAJ,CAAeF,KAAf,CAAvB,CAAtB;;AACA,IAAIG,YAAY,GAAG,CAACC,QAAD,EAAWC,IAAX,EAAiBC,SAAjB,KAA+B;EAChD,IAAIC,IAAI,GAAG,CAAC,KAAMC,IAAI,CAACC,GAAL,CAASL,QAAQ,CAACM,MAAT,GAAkB,CAA3B,IAAgCF,IAAI,CAACG,GAA5C,IAAoD,CAA/D;EACA,IAAIC,IAAI,GAAG,CAAC,EAAG,MAAML,IAAN,GAAaF,IAAd,GAAsBD,QAAQ,CAACM,MAAjC,CAAZ;EACA,OAAO,MAAM;IACX,IAAIG,EAAE,GAAG,EAAT;;IACA,OAAO,IAAP,EAAa;MACX,IAAIb,KAAK,GAAGM,SAAS,CAACM,IAAD,CAArB;MACA,IAAIE,CAAC,GAAGF,IAAR;;MACA,OAAOE,CAAC,EAAR,EAAY;QACVD,EAAE,IAAIT,QAAQ,CAACJ,KAAK,CAACc,CAAD,CAAL,GAAWP,IAAZ,CAAR,IAA6B,EAAnC;QACA,IAAIM,EAAE,CAACH,MAAH,KAAcL,IAAlB,EAAwB,OAAOQ,EAAP;MACzB;IACF;EACF,CAVD;AAWD,CAdD;;AAeA,IAAIE,cAAc,GAAG,CAACX,QAAD,EAAWC,IAAX,KAAoBF,YAAY,CAACC,QAAD,EAAWC,IAAX,EAAiBN,MAAjB,CAArD;;AACA,IAAIiB,MAAM,GAAG,YAAe;EAAA,IAAdX,IAAc,uEAAP,EAAO;EAC1B,IAAIQ,EAAE,GAAG,EAAT;EACA,IAAIb,KAAK,GAAGJ,MAAM,CAACK,eAAP,CAAuB,IAAIC,UAAJ,CAAeG,IAAf,CAAvB,CAAZ;;EACA,OAAOA,IAAI,EAAX,EAAe;IACb,IAAIY,IAAI,GAAGjB,KAAK,CAACK,IAAD,CAAL,GAAc,EAAzB;;IACA,IAAIY,IAAI,GAAG,EAAX,EAAe;MACbJ,EAAE,IAAII,IAAI,CAACC,QAAL,CAAc,EAAd,CAAN;IACD,CAFD,MAEO,IAAID,IAAI,GAAG,EAAX,EAAe;MACpBJ,EAAE,IAAI,CAACI,IAAI,GAAG,EAAR,EAAYC,QAAZ,CAAqB,EAArB,EAAyBC,WAAzB,EAAN;IACD,CAFM,MAEA,IAAIF,IAAI,GAAG,EAAX,EAAe;MACpBJ,EAAE,IAAI,GAAN;IACD,CAFM,MAEA;MACLA,EAAE,IAAI,GAAN;IACD;EACF;;EACD,OAAOA,EAAP;AACD,CAhBD;;AAiBA,SAASG,MAAT,EAAiBD,cAAjB,EAAiCZ,YAAjC,EAA+Cb,WAA/C,EAA4DS,MAA5D"},"metadata":{},"sourceType":"module"}